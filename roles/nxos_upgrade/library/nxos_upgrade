#!/usr/bin/env python

# Copyright Cisco Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCUMENTATION = '''
---

module: nxos_upgrade

short_description: Upgrades NXOS and EPLD code on Nexus switches.

description:
    - Upgrades NXOS and EPLD code on Nexus switches.


author: Bobby Watson (bwatsoni@cisco.com)

requirements:
    - Cisco NX-OS
    - pexpect

notes:
    - The firmware upgrade may take an extended period of time.
    - The image must be present on the switch.
    - The boot command should be updated to the new image and saved to
        the running config prior to beginning the upgrade.
    - The image must have 'nxos' or 'epld'

options:
    host:
        description:
            - Host NXOS device to copy file to.
        required: true
        default: null

    username:
        description:
            - Username used to login to NXOS device.
        required: true
        default: null

    password:
        description:
            - Password used to login to NXOS device.
        required: true
        default: null

    filename:
        description:
            - Filename of image on remote server.
        required: true
        default: null

    type:
        description:
            - Type of upgrade, either NXOS or EPLD.
        required: true
        default: null
        choices: ['nxos', 'epld']

'''

EXAMPLES = '''
- name: Upgrade NXOS
  nxos_upgrade:
    host: "{{ inventory_hostname }}"
    username: cisco
    password: cisco
    filename: n9000-dk9.7.0.3.I1.0.3.bin
    type: nxos

'''

from pexpect import pxssh
import pexpect
from time import sleep


class fw_upgrade(object):
    """
    This is the SSH session to the Nexus Switch
    """
    def __init__(self, module):
        self.module = module
        self.host = module.params['host']
        self.username = module.params['username']
        self.password = module.params['password']
        self.filename = module.params['filename']
        self.type = module.params['type']
        self.logged_in = False
        self.log = module.params['log']
        self.log_file = module.params['log_file']
        self.session = self.create_session()

    def create_session(self):
        for attempt in range(5):
            try:
                sesh = pxssh.pxssh(options={"StrictHostKeyChecking": "no",
                                   "UserKnownHostsFile": "/dev/null"})
                # Enable the following line if you need to see all output.
                # This will make Ansible think that there was an error, however.
                # sesh.logfile_read = sys.stdout
                if self.log:
                    sesh.logfile = file(self.log_file, 'w')
                sesh.force_password = True

                return(sesh)

            except (pxssh.ExceptionPxssh, pexpect.exceptions) as e:
                sesh.close()
                continue

            else:
                sesh.close()
                self.module.fail_json(msg="Connection Error: {}".format(e))

    def login(self):
        sesh = self.session
        for attempt in range(5):
            try:
                sesh.login(self.host, self.username, self.password,
                           auto_prompt_reset=False)
                sesh.PROMPT = '\r\n.*# '

                sesh.prompt()

                # Make sure switch doesn't send any /b literals due to term width
                sesh.sendline(' terminal width 511')

                self.logged_in = True

                return True

            # If the login fails, catch the exception and retry again
            except (pxssh.ExceptionPxssh, pexpect.exceptions.TIMEOUT) as e:
                sesh.close()
                continue

            # If all retries fail, error out
            else:
                sesh.close()
                self.module.fail_json(msg="Login Error: {}".format(e))

    def install_firmware(self):
        if not self.logged_in:
            self.login()

        sesh = self.session
        for attempt in range(5):
            try:
                sesh.sendline('terminal dont-ask')
                sesh.prompt()
                if self.type == 'nxos':
                    sesh.sendline('install all nxos bootflash:' + self.filename +
                                  ' parallel')
                    sesh.expect('(?i)please wait')
                    while True:
                        sleep(2)
                        i = sesh.expect(['switch will reboot',
                                         '(?i)install has been successful',
                                         '(?i)Feature in running config incompatible',
                                         '%'], timeout=240)

                        if i == 0:
                            self.module.exit_json(changed=True)

                        if i == 1:
                            self.module.exit_json(changed=True)

                        if i == 2:
                            sesh.logout()
                            self.module.fail_json(msg='Feature in running ' +
                                                  'config incompatible: {}'
                                                  .format(sesh.before))

                        if i == 3:
                            continue

                elif self.type == 'epld':
                    sesh.sendline('install epld bootflash:' + self.filename +
                                  ' module all')
                    sesh.expect('(?i)compatibility check')

                    while True:
                        sleep(3)
                        i = sesh.expect(['(?i)image not compatible',
                                         '(?i)Reseting Active SUP',
                                         '(?i)all modules are up to date',
                                         '(?i)module is not online',
                                         '(?i)could not copy EPLD image'
                                         '%'], timeout=240)
                        if i == 0:
                            sesh.logout()
                            self.module.fail_json(msg='EPLD image not compatible'
                                                  + ' with running NXOS version.')
                        if i == 1:
                            self.module.exit_json(changed=True)

                        if i == 2:
                            sesh.logout()
                            self.module.exit_json(changed=False)

                        if i == 3:
                            sleep(30)
                            sesh.sendline('install epld bootflash:' +
                                          self.filename + ' module all')
                            sesh.expect('(?i)compatibility check')
                            continue
                        if i == 4:
                            sesh.logout()
                            self.module.fail_json(msg='EPLD image loaded on bootflash.')
                        if i == 5:
                            continue

            # If the login fails, catch the exception and retry again
            except (pxssh.ExceptionPxssh, pexpect.exceptions.TIMEOUT) as e:
                continue

            # If all retries fail, error out
            else:
                sesh.logout()
                self.module.fail_json(msg="Firmware Install Error: {}".format(e))


def main():
    module = AnsibleModule(
        argument_spec=dict(
            host=dict(required=True, type='str'),
            username=dict(required=True, type='str'),
            password=dict(required=True, type='str', no_log=True),
            filename=dict(required=True, type='str'),
            type=dict(required=True, type='str', choices=['nxos', 'epld']),
            log=dict(required=False, default=False, type='bool'),
            log_file=dict(required=False, type='str')
        ),
        supports_check_mode=False,
    )

    session = fw_upgrade(module)
    session.login()
    session.install_firmware()
    # session.disconnect()
    # session.module.exit_json(changed=True)

from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
